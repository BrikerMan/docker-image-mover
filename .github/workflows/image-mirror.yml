name: Docker Image Mirror

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      source_image:
        description: 'Source image name (e.g. nginx:1234 or abc/nginx:1234)'
        required: false
      sync_all:
        description: 'Sync all target images'
        type: boolean
        default: false
        required: false

jobs:
  mirror-single-image:
    if: inputs.source_image != ''
    runs-on: ubuntu-latest
    env:
      TARGET_REGISTRY: ${{ secrets.NEW_REGISTRY_BASE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to target registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NEW_REGISTRY_BASE }}
          username: ${{ secrets.TARGET_REG_USER }}
          password: ${{ secrets.TARGET_REG_PASSWORD }}

      - name: Transform and push image
        run: |
          chmod +x scripts/transform-image.sh
          ./scripts/transform-image.sh "${{ inputs.source_image }}"

      - name: Upload mapping logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: image-mappings
          path: logs/image-mappings.json
          retention-days: 7

  mirror-all-images:
    if: inputs.sync_all == true || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    env:
      TARGET_REGISTRY: ${{ secrets.NEW_REGISTRY_BASE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to target registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NEW_REGISTRY_BASE }}
          username: ${{ secrets.TARGET_REG_USER }}
          password: ${{ secrets.TARGET_REG_PASSWORD }}

      - name: Process and sync images
        run: |
          chmod +x scripts/transform-image.sh
          
          # Read and process images from config, skipping comments and empty lines
          while IFS= read -r line || [[ -n "$line" ]]; do
            # Skip empty lines and comments
            [[ -z "$line" ]] && continue
            [[ $line =~ ^[[:space:]]*# ]] && continue
            
            echo "Processing image: $line"
            ./scripts/transform-image.sh "$line"
          done < config/target-images.txt

      - name: Upload mapping logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: image-mappings
          path: logs/image-mappings.json
          retention-days: 7
