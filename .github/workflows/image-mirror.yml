name: Docker Image Mirror

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      source_image:
        description: 'Source image name (e.g. nginx:1234 or abc/nginx:1234)'
        required: false
      sync_all:
        description: 'Sync all target images'
        type: boolean
        default: false
        required: false

jobs:
  mirror-single-image:
    if: inputs.source_image != ''
    runs-on: ubuntu-latest
    env:
      TARGET_REGISTRY: ${{ secrets.NEW_REGISTRY_BASE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Login to source registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ vars.SOURCE_REGISTRY_BASE }}
      #     username: ${{ secrets.SOURCE_REG_USER }}
      #     password: ${{ secrets.SOURCE_REG_PASSWORD }}

      - name: Login to target registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NEW_REGISTRY_BASE }}
          username: ${{ secrets.TARGET_REG_USER }}
          password: ${{ secrets.TARGET_REG_PASSWORD }}

      - name: Transform and push image
        run: |
          chmod +x scripts/transform-image.sh
          ./scripts/transform-image.sh "${{ inputs.source_image }}"

      - name: Upload mapping logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: image-mappings
          path: logs/image-mappings.json
          retention-days: 7

  mirror-all-images:
    if: inputs.sync_all == true
    runs-on: ubuntu-latest
    env:
      TARGET_REGISTRY: ${{ secrets.NEW_REGISTRY_BASE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to target registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NEW_REGISTRY_BASE }}
          username: ${{ secrets.TARGET_REG_USER }}
          password: ${{ secrets.TARGET_REG_PASSWORD }}

      - name: Get target images
        id: get-images
        run: |
          # Read target images from config
          if [ -f "config/target-images.txt" ]; then
            readarray -t IMAGES < config/target-images.txt
            echo "images=${IMAGES[@]}" >> $GITHUB_OUTPUT
          else
            echo "No target images found in config/target-images.txt"
            exit 1
          fi

      - name: Sync images
        run: |
          for image in ${{ steps.get-images.outputs.images }}; do
            ./scripts/transform-image.sh "$image"
          done

      - name: Upload mapping logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: image-mappings
          path: logs/image-mappings.json
          retention-days: 7

  mirror-images:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get image list
        id: get-images
        run: |
          IMAGES=$(./scripts/transform-image.sh)
          echo "images=$(echo $IMAGES | jq -R -s -c 'split("\n")')" >> $GITHUB_OUTPUT

      - name: Sync images
        uses: nick-fields/foreach@v1
        with:
          list: ${{ steps.get-images.outputs.images }}
          run: |
            echo "Syncing ${{ item }}"
            docker pull ${{ item }}
            ./scripts/transform-image.sh ${{ item }} | xargs -I {} docker tag ${{ item }} {}
            echo $REGISTRY_PASSWORD | docker login -u $REGISTRY_USER --password-stdin
            docker push {}
        env:
          REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
